{"version":3,"sources":["components/Layout/Header.js","components/Layout/Footer.js","components/Layout/Landing.js","components/Auth/Login.js","components/Auth/Register.js","actions/authActions.js","actions/dispatchTypes.js","Router.js","reducers/authReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","Footer","Landing","Login","Component","Register","state","username","email","name","password","errors","onRegisterFomSubmit","bind","handleOnChange","styles","bigBox","display","height","registerFormBox","gridTemplateColumns","justifyContent","pictureBox","regForm","gridGap","padding","cardMedia","content","alignContent","e","preventDefault","newUser","this","console","log","props","registerUser","setState","target","value","style","Card","CardMedia","image","Math","floor","random","toString","title","CardContent","Typography","align","component","variant","onSubmit","TextField","type","required","label","onChange","Button","color","connect","auth","userData","payload","Router","basename","path","process","initialState","isAuthenticated","user","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7bed2d54.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n","import React from \"react\";\n\nexport default function Landing() {\n  return (\n    <div>\n      <div>Landing</div>\n    </div>\n  );\n}\n","import React, { Component } from 'react'\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <div>\n                Login\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {\n  TextField,\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  CardMedia,\n} from \"@material-ui/core\";\n\n/* redux */\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      email: \"\",\n      name: \"\",\n      password: \"\",\n      errors: {},\n    };\n    this.onRegisterFomSubmit = this.onRegisterFomSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.styles = {\n      bigBox: {\n        display: \"grid\",\n        height: \"100vh\",\n      },\n      registerFormBox: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr\",\n        justifyContent: \"center\",\n      },\n      pictureBox: {},\n      regForm: {\n        display: \"grid\",\n        gridGap: \"20px\",\n        padding: \"20px 0\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(320px, 0.6fr))\",\n        justifyContent: \"center\",\n      },\n      cardMedia: {\n        height: \"100%\",\n      },\n      content: {\n        display: \"grid\",\n        justifyContent: \"center\",\n        alignContent: \"center\",\n      },\n    };\n  }\n  onRegisterFomSubmit(e) {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      username: this.state.username,\n      password: this.state.password,\n    };\n    console.log(newUser);\n    this.props.registerUser(newUser);\n  }\n  handleOnChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  render() {\n    return (\n      <div style={this.styles.bigBox}>\n        <Card style={this.styles.registerFormBox}>\n          <div style={this.styles.pictureBox}>\n            <CardMedia\n              image={\n                \"https://source.unsplash.com/random/800x60\" +\n                Math.floor(Math.random() * 10).toString()\n              }\n              title=\"Live from space album cover\"\n              style={this.styles.cardMedia}\n            />\n          </div>\n          <CardContent style={this.styles.content}>\n            <Typography align=\"center\" component=\"h5\" variant=\"h5\">\n              Join our Community\n              {/* {this.props.auth.user ? this.props.auth.user.name : null} */}\n            </Typography>\n            <form\n              onSubmit={this.onRegisterFomSubmit}\n              style={this.styles.regForm}\n            >\n              <TextField\n                name=\"name\"\n                type=\"text\"\n                required\n                label=\"name\"\n                onChange={this.handleOnChange}\n              ></TextField>\n              <TextField\n                onChange={this.handleOnChange}\n                name=\"email\"\n                type=\"email\"\n                required\n                label=\"email\"\n              ></TextField>\n              <TextField\n                onChange={this.handleOnChange}\n                name=\"username\"\n                type=\"text\"\n                required\n                label=\"username\"\n              ></TextField>\n              <TextField\n                onChange={this.handleOnChange}\n                name=\"password\"\n                type=\"password\"\n                required\n                label=\"password\"\n              ></TextField>\n              <Button variant=\"contained\" type=\"submit\" color=\"primary\">\n                Register\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\n/* register the reducer */\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  /* register the action */ registerUser,\n})(Register);\n","import { TEST_DISPATCH } from './dispatchTypes'\n\nexport const registerUser = (userData) => {\n    return {\n        type: TEST_DISPATCH,\n        payload: userData\n    }\n}","export const TEST_DISPATCH = 'TEST_DISPATCH'","import React from \"react\";\nimport {\n  BrowserRouter as ReactRouter,\n  Switch,\n  Route,\n  HashRouter,\n} from \"react-router-dom\";\nimport Header from \"./components/Layout/Header\";\nimport Footer from \"./components/Layout/Footer\";\nimport Landing from \"./components/Layout/Landing\";\nimport Login from \"./components/Auth/Login\";\nimport Register from \"./components/Auth/Register\";\n\nexport default function Router() {\n  return (\n    <div>\n      <HashRouter basename=\"/\">\n        <Header />\n        <ReactRouter>\n          <Switch>\n            <Route path={process.env.PUBLIC_URL + \"/login\"} component={Login}></Route>\n            <Route path={process.env.PUBLIC_URL +  \"/register\"} component={Landing}></Route>\n            <Route path={process.env.PUBLIC_URL + \"/\"} component={Register}></Route>\n          </Switch>\n        </ReactRouter>\n        <Footer />\n      </HashRouter>\n    </div>\n  );\n}\n","import { TEST_DISPATCH } from \"../actions/dispatchTypes\";\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case TEST_DISPATCH:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux'\nimport authReducer from './authReducer'\n\nexport default combineReducers({\n    auth: authReducer\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n      applyMiddleware(...middleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport Router from \"./Router\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport {Provider} from 'react-redux'\n\nimport store from './store'\n\nexport default function App() {\n  return (\n    <>\n      <CssBaseline />\n      <Provider store={store}>\n        <Router />\n      </Provider>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}